#include <mpi.h>
#include <cstdio>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>

float **alloc_2d_int(int nrows,int ncolumns){
		float **array=(float **)malloc(nrows * sizeof(float*));
			for(int i = 0; i < nrows; i++)
				array[i] = (float *)malloc(ncolumns * sizeof(float));
		return array;
}
int main(int argc, char *argv[])
{
	int rank, nproc;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &nproc);
	if(rank==0){
		int nrows,ncolumns;
		FILE *fpA,*fpB,*fpO;
		fpA = fopen("D:\\3rdYrs\\first term\\CPE374 Parallel\\MatrixAddDataSet\\matAsmall.txt","r");
		fscanf(fpA,"%d %d",&nrows,&ncolumns);
		fpB = fopen("D:\\3rdYrs\\first term\\CPE374 Parallel\\MatrixAddDataSet\\matBsmall.txt","r");
		fscanf(fpB,"%d %d",&nrows,&ncolumns);
		int n = (nrows/nproc);
		int i,j,k,a;
		float **matA = alloc_2d_int(nrows,ncolumns);
		float **matB = alloc_2d_int(nrows,ncolumns);
		float **matR = alloc_2d_int(nrows,ncolumns);
		while(!feof(fpA))
		{
			for(i=0;i<nrows;i++){
				for(j=0;j<ncolumns;j++){
					fscanf(fpA,"%f ",&matA[i][j]);
				}
			}
		}
		fclose(fpA);
		while(!feof(fpB))
		{
			for(i=0;i<nrows;i++){
				for(j=0;j<ncolumns;j++){
					fscanf(fpB,"%f ",&matB[i][j]);
				}
			}
		}
		fclose(fpB);
		for(i=0;i<n+(nrows%nproc);i++){
			for(j=0;j<ncolumns;j++){
				matR[i][j]=matA[i][j]+matB[i][j];
			}
		}
		for(i=1;i<nproc;i++){
			MPI_Send(&nrows, 1, MPI_INT, i, i, MPI_COMM_WORLD);
			MPI_Send(&ncolumns, 1, MPI_INT, i, i, MPI_COMM_WORLD);
		}
		a = n+(nrows%nproc);
		for (i=1; i<nproc; i++) {
            MPI_Send(&matA[a][0], n, MPI_FLOAT, i, 10, MPI_COMM_WORLD);
            MPI_Send(&matB[a][0], n, MPI_FLOAT, i, 11, MPI_COMM_WORLD);
        }
		for (i=1; i<nproc; i++) {
            MPI_Recv(&matR[a][0], n, MPI_FLOAT,i, 12, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        }
		fpO = fopen("D:\\3rdYrs\\first term\\CPE374 Parallel\\MatrixAddDataSet\\matRsmall.txt", "w");
        for (i=0; i<nrows; i++) {
            for (j=0; j<ncolumns; j++) {
                fprintf(fpO,"%.1f ",matR[i][j]);
            }
            fprintf(fpO,"\n");
        }
		printf("rank 0 write Success");
        fclose(fpO);
	}else{
		int i,j,k;
		int nrows,ncolumns;
		MPI_Recv(&nrows, 1, MPI_INT, 0, rank, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		MPI_Recv(&ncolumns, 1, MPI_INT, 0, rank, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		float **matAn = alloc_2d_int(nrows,ncolumns);
		float **matBn = alloc_2d_int(nrows,ncolumns);
		float **matRn = alloc_2d_int(nrows,ncolumns);

		int n=nrows/nproc;
		MPI_Recv(&matAn[0][0],n, MPI_FLOAT, 0, 10, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&matBn[0][0],n, MPI_FLOAT, 0, 11, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

		int count=0 ;
        for (i=0; i<nrows; i++) {
            for (j=0; j<ncolumns; j++) {
                matRn[i][j] = matAn[i][j] + matBn[i][j];
                count++;
            }
        }
        printf("count = %d from rank %d\n",count,rank);
		MPI_Send(&matRn[0][0], n, MPI_FLOAT, 0, 12, MPI_COMM_WORLD);
	}
	MPI_Finalize();
	return 0;
}